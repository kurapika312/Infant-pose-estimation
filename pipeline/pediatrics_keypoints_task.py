# -*- coding: utf-8 -*-
"""Pediatrics-Segmentation-Task.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y04sTpG9NrkaQCgdfbo_aJzLFEjcxlCf

# Detectron2 Beginner's Tutorial

<img src="https://dl.fbaipublicfiles.com/detectron2/Detectron2-Logo-Horz.png" width="500">

Welcome to detectron2! This is the official colab tutorial of detectron2. Here, we will go through some basics usage of detectron2, including the following:
* Run inference on images or videos, with an existing detectron2 model
* Train a detectron2 model on a new dataset

You can make a copy of this tutorial by "File -> Open in playground mode" and make changes there. __DO NOT__ request access to this tutorial.

# Install detectron2
"""

import matplotlib
import torch, detectron2

TORCH_VERSION = ".".join(torch.__version__.split(".")[:2])
CUDA_VERSION = torch.__version__.split("+")[-1]
print("torch: ", TORCH_VERSION, "; cuda: ", CUDA_VERSION)
print("detectron2:", detectron2.__version__)

# Some basic setup:
# Setup detectron2 logger
import detectron2
from detectron2.utils.logger import setup_logger
setup_logger()

# import some common libraries
import numpy as np
import os, json, cv2, random

# import some common detectron2 utilities
from detectron2 import model_zoo
from detectron2.engine import DefaultPredictor
from detectron2.config import get_cfg
from detectron2.utils.visualizer import Visualizer
from detectron2.data import MetadataCatalog, DatasetCatalog
from detectron2.structures import Boxes

import pathlib
import matplotlib.pyplot as plt


"""# Run a pre-trained detectron2 model

!python -m pip install pyyaml==5.1
import sys, os, distutils.core
# Note: This is a faster way to install detectron2 in Colab, but it does not include all functionalities.
# See https://detectron2.readthedocs.io/tutorials/install.html for full installation instructions
!git clone 'https://github.com/facebookresearch/detectron2'
dist = distutils.core.run_setup("./detectron2/setup.py")
!python -m pip install {' '.join([f"'{x}'" for x in dist.install_requires])}
sys.path.insert(0, os.path.abspath('./detectron2'))

# Properly install detectron2. (Please do not install twice in both ways)
# !python -m pip install 'git+https://github.com/facebookresearch/detectron2.git'

We first download an image from the COCO dataset:

Then, we create a detectron2 config and a detectron2 `DefaultPredictor` to run inference on this image.
"""

cfg = get_cfg()
# add project-specific config (e.g., TensorMask) here if you're not running a model in detectron2's core library
cfg.merge_from_file(model_zoo.get_config_file("COCO-Keypoints/keypoint_rcnn_R_101_FPN_3x.yaml"))
cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.7  # set threshold for this model
# Find a model from detectron2's model zoo. You can use the https://dl.fbaipublicfiles... url as well
cfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url("COCO-Keypoints/keypoint_rcnn_R_101_FPN_3x.yaml")
predictor = DefaultPredictor(cfg)


def detect_landmarks(im_path: pathlib.Path, predictor: DefaultPredictor)->np.ndarray:
  im = cv2.imread(f'{im_path.resolve()}')
  outputs = predictor(im)    
  v = Visualizer(im[:, :, ::-1], MetadataCatalog.get(cfg.DATASETS.TRAIN[0]), scale=1.2) 
  cpu_instances =  outputs["instances"].to("cpu")
  out = v.draw_instance_predictions(cpu_instances)
  annotations = cpu_instances.pred_keypoints[0].numpy().flatten()
  return out.get_image()[:, :, ::-1], annotations


if __name__ == '__main__':
  images_dir = pathlib.Path('assets/Mannequin/RGB')
  # images_dir = pathlib.Path('assets/RSV/RGB')
  images_save_dir = pathlib.Path('assets/Mannequin/keypoints_output_images')
  # images_save_dir = pathlib.Path('assets/RSV/keypoints_output_images')
  
  types = ('*.png', '*.jpg')
  images_glob = []

  for type in types:
      glob_result = images_dir.glob(type)
      images_glob.extend(glob_result)

  images_save_dir.mkdir(parents=True, exist_ok=True)

  for im_path in images_glob:
    keypoints_im_path: pathlib.Path = images_save_dir.joinpath(f'{im_path.stem}-keypoints.jpg')
    annotated_image, annotations = detect_landmarks(im_path, predictor)
    # im = cv2.imread(f'{im_path.resolve()}')
    # outputs = predictor(im)    
    # v = Visualizer(im[:, :, ::-1], MetadataCatalog.get(cfg.DATASETS.TRAIN[0]), scale=1.2)  
    # out = v.draw_instance_predictions(outputs["instances"].to("cpu"))
    # cv2.imwrite(str(keypoints_im_path), out.get_image()[:, :, ::-1])
    cv2.imwrite(f'{keypoints_im_path.resolve()}', annotated_image)